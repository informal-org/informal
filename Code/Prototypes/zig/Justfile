
@gen filename:
    mkdir -p build
    python bootstrap/informal.py {{ filename }}.infr > build/{{filename}}.mlir


# Usage - just build hello
@build filename:
    mlir-opt build/{{filename}}.mlir --convert-func-to-llvm | \
    mlir-translate --mlir-to-llvmir > build/{{filename}}.ll
    # Compile the LLVM IR to an object file:
    clang build/{{filename}}.ll -fsanitize=undefined --output build/{{filename}}.out 
    chmod +x build/{{filename}}.out

# @run filename:
#     just gen {{filename}}
#     just build {{filename}}
#     ./build/{{filename}}.out

asm:
    nasm -f elf64 hello.asm
    ld --nostdlib -m elf_x86_64 -s -o hello.out hello.o
    ./hello.out

debug:
    nasm -f elf64 -F dwarf -g hello.asm
    ld -o hello.out hello.o
    gdb hello.out

dump:
    objdump -x hello.out

@run input:
    zig build
    echo {{input}} | ./zig-out/bin/Former > out.wat && wat2wasm out.wat
    wasmer run out.wasm -i "_start"

@compile input outfile:
    echo {{input}} | ./zig-out/bin/Former > {{outfile}}.wat && wat2wasm {{outfile}}.wat -o {{outfile}}.wasm

@emit input:
    echo {{input}} | ./zig-out/bin/Former
