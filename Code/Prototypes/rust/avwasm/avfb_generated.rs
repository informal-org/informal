// automatically generated by the FlatBuffers compiler, do not modify


use core::mem;
// use std::mem;
// use std::cmp::Ordering;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod avfb {

//  use std::mem;
//  use std::cmp::Ordering;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum AvFbObjOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct AvFbObj<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AvFbObj<'a> {
    type Inner = AvFbObj<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> AvFbObj<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        AvFbObj {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args AvFbObjArgs<'args>) -> flatbuffers::WIPOffset<AvFbObj<'bldr>> {
      let mut builder = AvFbObjBuilder::new(_fbb);
      if let Some(x) = args.av_string { builder.add_av_string(x); }
      if let Some(x) = args.av_objects { builder.add_av_objects(x); }
      if let Some(x) = args.av_values { builder.add_av_values(x); }
      builder.add_av_class(args.av_class);
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_AV_CLASS: flatbuffers::VOffsetT = 6;
    pub const VT_AV_VALUES: flatbuffers::VOffsetT = 8;
    pub const VT_AV_OBJECTS: flatbuffers::VOffsetT = 10;
    pub const VT_AV_STRING: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn id(&self) -> u32 {
    self._tab.get::<u32>(AvFbObj::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn av_class(&self) -> u32 {
    self._tab.get::<u32>(AvFbObj::VT_AV_CLASS, Some(0)).unwrap()
  }
  #[inline]
  pub fn av_values(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(AvFbObj::VT_AV_VALUES, None)
  }
  #[inline]
  pub fn av_objects(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AvFbObj<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<AvFbObj<'a>>>>>(AvFbObj::VT_AV_OBJECTS, None)
  }
  #[inline]
  pub fn av_string(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AvFbObj::VT_AV_STRING, None)
  }
}

pub struct AvFbObjArgs<'a> {
    pub id: u32,
    pub av_class: u32,
    pub av_values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u64>>>,
    pub av_objects: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<AvFbObj<'a >>>>>,
    pub av_string: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for AvFbObjArgs<'a> {
    #[inline]
    fn default() -> Self {
        AvFbObjArgs {
            id: 0,
            av_class: 0,
            av_values: None,
            av_objects: None,
            av_string: None,
        }
    }
}
pub struct AvFbObjBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AvFbObjBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(AvFbObj::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_av_class(&mut self, av_class: u32) {
    self.fbb_.push_slot::<u32>(AvFbObj::VT_AV_CLASS, av_class, 0);
  }
  #[inline]
  pub fn add_av_values(&mut self, av_values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvFbObj::VT_AV_VALUES, av_values);
  }
  #[inline]
  pub fn add_av_objects(&mut self, av_objects: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AvFbObj<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvFbObj::VT_AV_OBJECTS, av_objects);
  }
  #[inline]
  pub fn add_av_string(&mut self, av_string: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvFbObj::VT_AV_STRING, av_string);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AvFbObjBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AvFbObjBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AvFbObj<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_av_fb_obj<'a>(buf: &'a [u8]) -> AvFbObj<'a> {
  flatbuffers::get_root::<AvFbObj<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_av_fb_obj<'a>(buf: &'a [u8]) -> AvFbObj<'a> {
  flatbuffers::get_size_prefixed_root::<AvFbObj<'a>>(buf)
}

#[inline]
pub fn finish_av_fb_obj_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<AvFbObj<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_av_fb_obj_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<AvFbObj<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Avfb

