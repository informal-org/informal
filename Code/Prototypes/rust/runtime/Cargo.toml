[package]
name = "runtime"
version = "0.1.0"
authors = ["Feni Varughese <feni727@gmail.com>"]
edition = "2018"
include = [
  "../avs/**/*",
]

[dependencies]
# wabt = "0.7.4"
lexical = "2.2.1"   # Floating point parsing
lazy_static = "1.3.0"
avs = { path = "../avs" }
serde_derive = "1.0.94"
serde = "1.0.97"
serde_json = "1.0.40"
fnv = "1.0.6"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now
# wee_alloc = { version = "0.4.2", optional = true }



# Use the singlepass backend with faster compilation so interpreted mode is responsive.
# The speed tradeoff seems worth it. In the future, the "production" publish step can re-compile with LLVM
# Use cargo +nightly run since this requires feature flags.
[dependencies.wasmer-runtime]
version = "0.5.5"
features = ["singlepass"]
#default-features = false # do not include the default features, and optionally
                         # cherry-pick individual features
# 






[dev-dependencies]
wasm-bindgen-test = "0.2"

# [profile.release]
# Tell `rustc` to optimize for small code size.
# opt-level = "s"

[dependencies.wasm-bindgen]
version = "0.2.47"
features = ["serde-serialize"]
